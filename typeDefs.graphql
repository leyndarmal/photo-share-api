# 1. Add Photo type definition
scalar DateTime

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

type User {
  githubLogin: ID!
  name: String
  avatar: String
  postedPhotos: [Photo!]!
  inPhotos: [Photo!]!
  postedFlights: [Flight!]!
}

type Flight {
  origin: String!
  destination: String!
  price: Int!
  carryOn: Boolean!
  postedBy: User!
  created: DateTime!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  category: PhotoCategory!
  postedBy: User!
  taggedUsers: [User!]!
  created: DateTime!
}

type AuthPayload {
  token: String!
  user: User!
}

input PostPhotoInput {
  name: String!
  category: PhotoCategory = PORTRAIT
  description: String
}

input PostFlightInput {
  origin: String!
  destination: String!
  price: Int!
  carryOn: Boolean!
}

# 2. Return Photo from allPhotos
type Query {
  me: User
  totalPhotos: Int!
  totalFlights: Int!
  allFlights: [Flight!]!
  allPhotos: [Photo!]!
  totalUsers: Int!
  allUsers: [User!]!
}

# 3. Return the newly posted photo from the mutation
type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
  githubAuth(code: String!): AuthPayload!
  addFakeUsers(count: Int = 1): [User!]!
  fakeUserAuth(githubLogin: ID!): AuthPayload!
  postFlight(input: PostFlightInput!): Flight!
}